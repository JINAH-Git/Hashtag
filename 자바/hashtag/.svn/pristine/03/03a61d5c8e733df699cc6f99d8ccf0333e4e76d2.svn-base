//크롤링한 데이터 정보를 모델(Model)로 부터 처리하기 위한 DTO클래스(Data Transfer Object)
package hashtag.dto;

import java.util.ArrayList;
import hashtag.dao.*;
import hashtag.vo.*;

public class DataDTO extends DBManager
{	
	//조건에 맞는 데이터의 개수 구하기 - R
	public int GetTotalData(String refine,String region,String searchVal,String keyword)
	{	
		int totalData = 0;
		
		this.DBOpen();
		String sql = "";
		if(refine.equals("원천"))
		{			
			sql  = "select count(*) as total from data ";
			sql += "where 1 = 1 ";
			if(!region.equals("전체"))
			{
				if(region.equals("전주")) region = "#전주카페";
				if(region.equals("완주")) region = "#완주카페";
				if(region.equals("군산")) region = "#군산카페";
				if(region.equals("익산")) region = "#익산카페";
				
				sql += "and region='" + region + "' ";			
			}
			if(searchVal.equals("전체"))
			{
				sql += "and (title like '%" + this._R(keyword) + "%' or note like '%" + this._R(keyword) + "%' or hashtag like '%" + this._R(keyword) + "%') ";			
			}else
			{
				if(searchVal.equals("제목")) searchVal = "title";
				if(searchVal.equals("내용")) searchVal = "note";
				if(searchVal.equals("해시태그")) searchVal = "hashtag";
				
				sql += "and " + searchVal + " like '%" + this._R(keyword) +"%' ";
			}
			this.RunSelect(sql);
			System.out.println(sql);
		}
		
		if(refine.equals("정제"))
		{	
			sql  = "select count(*) as total from crawlingdata ";
			sql += "where 1 = 1 ";
			if(!region.equals("전체"))
			{
				if(region.equals("전주")) region = "#전주카페";
				if(region.equals("완주")) region = "#완주카페";
				if(region.equals("군산")) region = "#군산카페";
				if(region.equals("익산")) region = "#익산카페";
				
				sql += "and cdregion='" + region + "' ";			
			}
			if(searchVal.equals("전체"))
			{
				sql += "and (cdtitle like '%" + this._R(keyword) + "%' or cdnote like '%" + this._R(keyword) + "%' or cdhashtag like '%" + this._R(keyword) + "%') ";			
			}else
			{
				if(searchVal.equals("제목")) searchVal = "cdtitle";
				if(searchVal.equals("내용")) searchVal = "cdnote";
				if(searchVal.equals("해시태그")) searchVal = "cdhashtag";
				
				sql += "and " + searchVal + " like '%" + this._R(keyword) +"%' ";
			}
			this.RunSelect(sql);
			System.out.println(sql);
		}
		if(this.Next() == true)
		{
			totalData = Integer.parseInt(this.getValue("total"));
		}
		this.DBClose();
		
		return totalData;
	}

	//조건에 맞게 리스트 출력하기 - R
	public ArrayList<DataVO> List(String region,String searchVal,String keyword,int pageNo)
	{
		if(searchVal.equals("제목")) searchVal = "title";
		if(searchVal.equals("내용")) searchVal = "note";
		if(searchVal.equals("해시태그")) searchVal = "hashtag";
		
		this.DBOpen();
		DataVO vo = null;
		ArrayList<DataVO> list = new ArrayList<DataVO>();
		int startNo = (pageNo - 1) * 10;
		String sql = "";
		sql  = "select * from data ";
		sql += "where 1 = 1 ";
		if(!region.equals("전체"))
		{
			if(region.equals("전주")) region = "#전주카페";
			if(region.equals("완주")) region = "#완주카페";
			if(region.equals("군산")) region = "#군산카페";
			if(region.equals("익산")) region = "#익산카페";
			
			sql += "and region='" + region + "' ";			
		}
		if(searchVal.equals("전체"))
		{
			sql += "and (title like '%" + this._R(keyword) + "%' or note like '%" + this._R(keyword) + "%' or hashtag like '%" + this._R(keyword) + "%') ";			
		}else
		{
			sql += "and " + searchVal + " like '%" + this._R(keyword) +"%' ";
		}
		sql += "limit " + startNo + ",10 ";
		this.RunSelect(sql);
		System.out.println(sql);
		while(this.Next() == true)
		{
			vo = new DataVO();
			vo.setDno(Integer.parseInt(this.getValue("dno")));
			vo.setBlogaddress(this.getValue("blogaddress"));
			vo.setTitle(this.getValue("title"));
			vo.setWdate(this.getValue("wdate"));
			vo.setNote(this.getValue("note"));
			vo.setHashtag(this.getValue("hashtag"));
			vo.setHeart(this.getValue("heart"));
			vo.setRegion(this.getValue("region"));
			list.add(vo);
		}
		this.DBClose();
		
		return list;	
	}
	
	//조건에 맞게 리스트 출력하기 - R
	public ArrayList<CrawlingdataVO> List2(String region,String searchVal,String keyword,int pageNo)
	{
		if(searchVal.equals("제목")) searchVal = "cdtitle";
		if(searchVal.equals("내용")) searchVal = "cdnote";
		if(searchVal.equals("해시태그")) searchVal = "cdhashtag";
		
		this.DBOpen();
		CrawlingdataVO vo = null;
		ArrayList<CrawlingdataVO> list = new ArrayList<CrawlingdataVO>();
		int startNo = (pageNo - 1) * 10;
		String sql = "";
		sql  = "select * from crawlingdata ";
		sql += "where 1 = 1 ";
		if(!region.equals("전체"))
		{
			if(region.equals("전주")) region = "#전주카페";
			if(region.equals("완주")) region = "#완주카페";
			if(region.equals("군산")) region = "#군산카페";
			if(region.equals("익산")) region = "#익산카페";
			
			sql += "and cdregion='" + region + "' ";			
		}
		if(searchVal.equals("전체"))
		{
			sql += "and (cdtitle like '%" + this._R(keyword) + "%' or cdnote like '%" + this._R(keyword) + "%' or cdhashtag like '%" + this._R(keyword) + "%') ";			
		}else
		{
			sql += "and " + searchVal + " like '%" + this._R(keyword) +"%' ";
		}
		sql += "limit " + startNo + ",10 ";
		this.RunSelect(sql);
		System.out.println(sql);
		while(this.Next() == true)
		{
			vo = new CrawlingdataVO();
			vo.setCdno(Integer.parseInt(this.getValue("cdno")));
			vo.setCdblogaddress(this.getValue("cdblogaddress"));
			vo.setCdtitle(this.getValue("cdtitle"));
			vo.setCdwdate(this.getValue("cdwdate"));
			vo.setCdnote(this.getValue("cdnote"));
			vo.setCdhashtag(this.getValue("cdhashtag"));
			vo.setCdheart(this.getValue("cdheart"));
			vo.setCdregion(this.getValue("cdregion"));
			list.add(vo);
		}
		this.DBClose();
		
		return list;	
	}
	
	//여기서부터 프로젝트에 쓰일 것
	
	//조건에 맞는 포스터 개수 구하기
	public int GetTotalPost(String region,String hashtag)
	{
		int totalPost = 0;
		this.DBOpen();
		String sql = "";
		sql  = "select count(*) as total from crawlingdata ";
		sql += "where cdregion = '" + region + "' ";
		sql += "and cdhashtag like '%''" + hashtag + "''%' ";
		this.RunSelect(sql);
		System.out.println(sql);
		if(this.Next() == true)
		{
			totalPost = Integer.parseInt(this.getValue("total"));
		}
		this.DBClose();
		
		return totalPost;		
	}
	
	//작성일에 해당하는 언급량 수 구하기
	public ArrayList<RefinehashtagVO> GetMention(String region,String hashtag)
	{
		ArrayList<RefinehashtagVO> list = new ArrayList<RefinehashtagVO>();
		RefinehashtagVO vo = null;
		
		this.DBOpen();
		String sql = "";
		sql  = "select count(*) as mentionamount,date_format(str_to_date(Replace(substr(rhwdate,1,12),'.',''),'%Y%m%d'),'%Y-%m') as rhwdate ";
		sql += "from refinehashtag where rhrefine = '3' and rhregiontag = '" + region + "' and rhhashtag = '" + hashtag + "' ";
		sql += "group by date_format(str_to_date(Replace(substr(rhwdate,1,12),'.',''),'%Y%m%d'),'%Y-%m') ";
		sql += "order by rhwdate ";
		this.RunSelect(sql);
		System.out.println(sql);
		while(this.Next() == true)
		{
			vo = new RefinehashtagVO();
			vo.setRhregiontag(region);
			vo.setRhhashtag(hashtag);
			vo.setMetionamount(this.getValue("mentionamount"));
			vo.setYearmonth(this.getValue("rhwdate").replace(".","").replace(" ","-"));
			list.add(vo);
		}				
		this.DBClose();
		
		return list;	
	}
	
	//공감수 높은 글 2개 출력하기
	public ArrayList<CrawlingdataVO> GetHeartCnt(String region,String hashtag)
	{
		ArrayList<CrawlingdataVO> list = new ArrayList<CrawlingdataVO>();
		CrawlingdataVO vo = null;
		
		this.DBOpen();
		String sql = "";
		sql  = "select * from crawlingdata ";
		sql += "where cdregion = '" + region + "' ";
		sql += "and cdhashtag like '%''" + hashtag + "''%' ";
		sql += "order by cdheart * 1 desc ";
		sql += "limit 0,2 ";
		this.RunSelect(sql);
		System.out.println(sql);
		while(this.Next() == true)
		{
			vo = new CrawlingdataVO();
			vo.setCdno(Integer.parseInt(this.getValue("cdno")));
			vo.setCdtitle(this.getValue("cdtitle"));
			vo.setCdnote(this.getValue("cdnote"));
			vo.setCdblogaddress(this.getValue("cdblogaddress"));
			vo.setCdheart(this.getValue("cdheart"));
			list.add(vo);
		}
		this.DBClose();
		
		return list;		
	}
	
	//#(지역명)카페에 관한 연관태그 12개 출력하기
	public ArrayList<CityhashtagVO> GetRelatedTag(String region)
	{
		ArrayList<CityhashtagVO> list = new ArrayList<CityhashtagVO>();
		CityhashtagVO vo = null;
		this.DBOpen();
		String sql = "";
		sql  = "select chno,chreltag from cityhashtag ";
		sql += "where chregiontag = '" + region + "' ";
		sql += "order by chcount * 1 desc limit 1,12 ";
		this.RunSelect(sql);
		System.out.println(sql);
		while(this.Next() == true)
		{
			vo = new CityhashtagVO();
			vo.setChno(this.getValue("chno"));
			vo.setChreltag(this.getValue("chreltag"));
			list.add(vo);
		}	
		this.DBClose();
		
		return list;
	}
	
	//해시태그 트리 연관 5개 뽑기 
	public ArrayList<HashtagtreeVO> GetRelTags(String region,String hashtag1)
	{
		ArrayList<HashtagtreeVO> list = new ArrayList<HashtagtreeVO>();
		HashtagtreeVO vo = null;
		
		this.DBOpen();
		String sql = "";
		//해당하는 태그(root)에 맞는 가장 높은 연관태그 5개 선정(children)
		sql  = "select hashtag2 from hashtagtree ";
		sql += "where htregiontag = '" + region + "' ";
		sql += "and hashtag1 = '" + hashtag1 + "' ";
		sql += "order by weight desc ";
		sql += "limit 5";
		System.out.println(sql);
		this.RunSelect(sql);
		
		while(this.Next() == true)
		{
			//가장 높은 연관태그 5개에 대한 연관태그 5개 뽑기(children-children)  아래 코드를 5번 반복,,,?
			sql  = "select hashtag2 from hashtagtree ";
			sql += "where htregiontag = '" + region + "' ";
			sql += "and hashtag1 = '" + this.getValue("hashtag2") + "' ";
			sql += "order by weight desc ";
			sql += "limit 5";
			System.out.println(sql);
			this.RunSelect(sql);
			
			
		}

		this.DBClose();
		
		return list;	
	}
	
	//실시간 인기해시태그 5개 출력하기
	public ArrayList<CityhashtagVO> GetNowTrend()
	{
		ArrayList<CityhashtagVO> list = new ArrayList<CityhashtagVO>();
		CityhashtagVO vo = null;
		this.DBOpen();
		String sql = "";
		sql  = "select count(ntno) as clickcnt,(select chregiontag from cityhashtag where chno = ntno) as region";
		sql += ",(select chreltag from cityhashtag where chno = ntno) as hashtag ";
		sql += "from nowtrend group by ntno order by clickcnt desc limit 0,5 ";
		this.RunSelect(sql);
		System.out.println(sql);
		while(this.Next() == true)
		{
			vo = new CityhashtagVO();
			vo.setChcount(this.getValue("clickcnt"));
			vo.setChregiontag(this.getValue("region"));
			vo.setChreltag(this.getValue("hashtag"));
			list.add(vo);
		}
		this.DBClose();
		
		return list;
	}
}
